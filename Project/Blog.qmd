---
title: "Predicting Loan Defaults: A Data-Driven Approach to Credit Risk Analysis"
author: "Student Number – 720017170"
subtitle: "BEE2041 Data Science in Economics – Empirical Project"

output-file: Blog  

execute:
  echo: false
  warning: false
  message: false
  results: false
---


```{python}
import os
import sys

#Pre-processing
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.patches as mpatches
from IPython.display import HTML
from sklearn.metrics import (
    confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc, brier_score_loss, log_loss, precision_recall_curve
)
from sklearn.preprocessing import label_binarize, LabelEncoder, QuantileTransformer
from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV
import statsmodels.api as sm
from sklearn.utils import resample
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer

# ML Models
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from xgboost import XGBClassifier
```

\newpage

## **1. Introduction**

Access to credit is a important driver of economic growth, allowing households or businesses to invest, expand and smooth consumption. However, credit risk remains a fundamental challenge for financial institutions, as loan defaulting can lead to substantial financial losses for both the company and stakeholders. The ability to predict these defaults is vital for lending institutions to mitigate their risk and make more informed lending predictions. Recent advancements in machine learning (ML) have aided in the development of robust predictive models that outperform traditional credit-scoring methods (Yang, 2024)

Ensemble methods such as Random Forest (RF), and Extreme Gradient Boosting (XGBoost), have shown significant promise in improving classification accuracy over traditional statistical methods (Yadav, 2025). These models offer enhanced predictive capacity due to their ability to capture non-linear relationships in borrower data, providing financial institutions with more reliable risk assessment (Roy, 2025).

This project aims to explore a data-driven approach to credit risk analysis by using ML methods to predict loan defaulting. Logistic regression (LR), RF, and XGBoost have all been implemented and compared using standard performance metrics such as accuracy, precision, recall, F1-score and area under the curve (AUC). Moreover, exploratory data analysis will be conducted to examine the distribution of important financial variables, identify correlations and allow for optimised feature selection to improve model performance.

Due to the increasing reliance on alternative data sources and advanced computational methods in the financial sector, the results of this project may have significant practical implications. Improved credit risk analysis can help lenders reduce default rates, minimise losses and promote more inclusive access to credit (Ellsworth, 2025). By leveraging the latest ML methods, this project aims to contribute to the growing body of research on predictive analytics in finance and support more robust lending practices.

## **2. Data**

```{python}
#Loading the data
loan_data = pd.read_csv('Data/credit_risk_dataset.csv')
nrows_pre = loan_data.shape[0]
ncol_pre = loan_data.shape[1]
loan_data.columns = ['PersonAge', 'PersonIncome', 'PersonHomeOwnership', 'PersonEmpLength', 'LoanIntent', 'LoanGrade', 'LoanAmnt', 'LoanIntRate', 'LoanStatus', 'LoanPercentIncome', 'PreviousDefault', 'CredHistory']
```

Prior to conducting the analysis of credit risk, we need to understand and organise the data. For this analysis we will be using a loan defaulting dataset from Kaggle (reference), consisting of `{python} str(ncol_pre)` variables/columns and `{python} str(nrows_pre)` observations, illustrated in Table 1.

```{python}
# Data Cleaning

# Drop duplicate rows if any
loan_data.drop_duplicates(inplace=True)
nrow_post = loan_data.shape[0]
# Handle missing values
# Calculate the number of missing values for each column
missing_values = loan_data.isnull().sum()

# Create a DataFrame for missing values
missing_values_df = pd.DataFrame({
    'Variable': missing_values.index,
    'Missing Values': missing_values.values
})

# Convert the DataFrame to LaTeX format with appropriate formatting
missing_values_latex = missing_values_df.to_latex(index=False,
                                                  caption="Missing Values in Each Variable",
                                                  label="Table:missing_values",
                                                  column_format="lc",
                                                  escape=False)

missing_values_latex = missing_values_latex.replace("\\begin{table}", "\\begin{table}[H]\\centering")

# Extract valyes where missings occur
for col in missing_values_df["Variable"]:  # Use the 'Variable' column instead of the index
    globals()[f"missing_{col}"] = missing_values_df.loc[missing_values_df["Variable"] == col, "Missing Values"].values[0]

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "missing_values_latex.tex")

# Save the LaTeX file
with open(file_path, "w") as f:
    f.write(missing_values_latex)


# Replacing emplength with median due to skew
loan_data["PersonEmpLength"].fillna(loan_data["PersonEmpLength"].median(), inplace=True)

# Regression imputation for loanintrate as corr with loangrade

    # Convert LoanGrade to a categorical variable
loan_data['LoanGrade'] = loan_data['LoanGrade'].astype('category')

    # Label encode the LoanGrade column
label_encoder = LabelEncoder()
original_label_encoder = label_encoder

loan_data['LoanGrade'] = label_encoder.fit_transform(loan_data['LoanGrade'])

# Separate train (non-missing LoanIntRate) and test (missing LoanIntRate)
train_data = loan_data.dropna(subset=["LoanIntRate"])
test_data = loan_data[loan_data["LoanIntRate"].isna()]  # Data where LoanIntRate is missing

# Train a Linear Regression model to predict LoanIntRate
model = LinearRegression()
model.fit(train_data[["LoanGrade"]], train_data["LoanIntRate"])

# Predict missing LoanIntRate values using LoanGrade
loan_data.loc[loan_data["LoanIntRate"].isna(), "LoanIntRate"] = model.predict(test_data[["LoanGrade"]])
```

```{python}
# Create a DataFrame with variable names and data types
variable_info = pd.DataFrame({
    'Variable': loan_data.columns,
    'Data Type': loan_data.dtypes.astype(str)
})

# Add definitions for each variable
variable_info['Definition'] = [
    'Age of the borrower',
    'Income of the borrower',
    'Home ownership of the borrower',
    'Employment length of the borrower',
    'Intention of the loan',
    'Loan grade',
    'Amount of the loan (USD)',
    'Loan interest rate',
    'Loan status (0 - not defaulted, 1 - defaulted)',
    'Loan percentage of income',
    'If the borrower has defaulted before',
    'Credit history length'
]

# Convert the DataFrame to LaTeX format with appropriate formatting
variable_info_latex = variable_info.to_latex(index=False,
                                             caption="Variable Information",
                                             label="Table 1:variable_info",
                                             column_format="lll",
                                             escape=False)

variable_info_latex = variable_info_latex.replace("\\begin{table}", "\\begin{table}[H]\\centering")

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "variable_info_table.tex")

# Save to a LaTeX file
with open(file_path, "w") as f:
    f.write(variable_info_latex)
```


::: {.content-visible when-format="pdf"}
\input{Tables/variable_info_table.tex}
:::

::: {.content-visible when-format="html"}
```{python}
#| tbl-cap: "Table 1 - Variable Information"
HTML(variable_info.to_html(index=False))
```

:::


### **2.1 Preparing the Data**


::: {.content-visible when-format="pdf"}
\input{Tables/missing_values_latex.tex}
:::

::: {.content-visible when-format="html"}
```{python}

#| tbl-cap: "Table 2 -Missing Values for Each Variable"

HTML(missing_values_df.to_html(index=False))

```

:::


Table 2 displays the missing values within the dataset for each variable. The only variables with missing data are *PersonEmpLength* and *LoaanIntRate*, containing `{python} str(missing_PersonEmpLength)` and `{python} str(missing_LoanIntRate)` observations with no values, respectively. Missing data can have a large impact on data analysis if not handled properly and can lead to skewed or incorrect conclusions, making handling this data in the correct way crucial. Due to the positively skewed nature of *PersonEmpLength*, illustrated in Figure 1, median imputation was deployed in order to maintain the observations and not impact sample size. *LoanIntRate* saw a high correlation with *LoanGrade*, shown by Figure 5, therefore regression imputation was used to fill these missing variables and not lose sample size. Also, any duplicate observations were removed to mitigate their impact on the models, this reduced the sample size to `{python} str(nrow_post)` observations.

### **2.2 Descriptive Statistics**

```{python}
# Compute summary statistics
summary_stats = loan_data.describe().transpose()
summary_stats = summary_stats[['count', 'mean', '50%', 'std', 'min', 'max']]
summary_stats.columns = ['N', 'Mean', 'Median', 'SD', 'Min', 'Max']
summary_stats.index.name = "Variable"

# Round values for better readability and format as strings for LaTeX output
summary_stats = summary_stats.round(1).astype(str)

# Convert index to column for better formatting
summary_stats.reset_index(inplace=True)

# Convert table to LaTeX format with formatting
latex_table = summary_stats.to_latex(index=False,
                                     caption="Summary Statistics of Numeric Variables",
                                     label="Table 2:summary_stats",
                                     column_format="lrrrrrr",
                                     escape=False)

latex_table = latex_table.replace("\\begin{table}", "\\begin{table}[H]\\centering")

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "summary_table.tex")

# Save to a LaTeX file
with open(file_path, "w") as f:
    f.write(latex_table)

max_PA = loan_data['PersonAge'].max()
max_PEL = loan_data['PersonEmpLength'].max().astype(int)
loan_data = loan_data[loan_data['PersonAge'] < 123]
loan_data = loan_data[loan_data['PersonEmpLength'] < 123]
max_PA_after = loan_data['PersonAge'].max()
max_PEL_after = loan_data['PersonEmpLength'].max().astype(int)

```

::: {.content-visible when-format="pdf"}
\input{Tables/summary_table.tex}
:::

::: {.content-visible when-format="html"}
```{python}
#| tbl-cap: "Table 3 -Summary Statistics for Each Variable"

HTML(summary_stats.to_html(index=False))

```

:::

Table 3 contains the summary statistics for all variables within the dataset. *PersonAge* and *PersonEmpLength* show maximum values of `{python} str(max_PA)` and `{python} str(max_PEL)` years respectively, which are both above the oldest age a person has lived (122 years), meaning that they are potential errors. To remove these errors from the dataset, both observations where *PersonEmpLength* was `{python} str(max_PEL)` were removed as to not impact the models. For *PersonAge*, all observations with ages above `{python} str(max_PA)` years were removed. This left *PersonAge* with a maximum value of `{python} str(max_PA_after)` and *PersonEmpLength* with a maximum value of `{python} str(max_PEL_after)`, which both are reasonable.

### **2.3 Distribution Analysis**

```{python}
#| fig-align: "center"
#| fig-pos: "H"

# Set Loan Status to Categorical

loan_data['LoanStatus'] = loan_data['LoanStatus'].astype('category')

numeric_cols = loan_data.select_dtypes(include=[np.number]).columns
numeric_cols = numeric_cols.drop(['LoanGrade'])
num_cols = 2
num_rows = int(np.ceil(len(numeric_cols) / num_cols))

plt.rcParams.update({'font.size': 7})
plt.figure(figsize=(8, 2 * num_rows))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(num_rows, num_cols, i)
    loan_data[col].hist(bins=30, edgecolor='black')
    plt.title(f'Histogram of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.xticks(rotation=45)  # Tilt the x-axis labels by 45 degrees

plt.tight_layout()
plt.figtext(0.5, -0.01, "Figure 1: Histograms of all Numeric Variables", ha="center", fontsize=11)
plt.show()
```

The histograms shown in Figure 1 illustrate the distributions for each numeric variable. All of the variables shown have positivley skewed distributions. This is due to individuals with low age likely to have low values in each of these variables. *PersonAge*, *PersonEmpLength* and *CredLength* have very similar distributions, indicating potential correlation between these variables.

```{python}
#Clearning pt 2
# Convert string variables using Label Encoding into categorical
categorical_cols = ['PersonHomeOwnership', 'LoanIntent', 'PreviousDefault']
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    loan_data[col] = le.fit_transform(loan_data[col])
    label_encoders[col] = le

# Create data for causal analysis no scaling
causal_data = loan_data.copy()
```

```{python}
# Box plots for all numeric variables pre normalisation
plt.rcParams.update({'font.size': 9})
plt.figure(figsize=(8, 2.5))
loan_data.boxplot()
plt.figtext(0.5, -0.4, "Figure 2: Box Plots of All Variables Before Normalisation", ha="center", fontsize=9)
plt.xticks(rotation=45)
plt.show()
```

Figure 2 shows that the data isn't scaled proportionally, therefore we need to apply a scaling technique. Due to the skewness of all the variables quantile transformation was deployed, normalised data is shown in Figure 3. The plot shows outliers, however there is no reason for these to be errors meaning they will not be removed. For example, the reason for outliers in *PersonIncome* is due to people earning considerably more than average.

```{python}
#Normalisation using z-score normalisation
numeric_cols = ['PersonAge', 'PersonIncome', 'PersonHomeOwnership', 'PersonEmpLength', 'LoanIntent', 'LoanGrade', 'LoanAmnt', 'LoanIntRate', 'LoanPercentIncome', 'PreviousDefault', 'CredHistory']

# Apply Quantile Transformation = due to skewness of the data
scaler = QuantileTransformer(output_distribution='normal')

# Transform the numeric columns and ensure the DataFrame structure is maintained
loan_data[numeric_cols] = pd.DataFrame(scaler.fit_transform(loan_data[numeric_cols]), 
                                       columns=numeric_cols, index=loan_data.index)

# Box plots for all numeric variables post normalisation
plt.figure(figsize=(8,2.5))
loan_data.boxplot()
plt.figtext(0.5, -0.4, "Figure 3: Box Plots of All Variables After Normalisation", ha="center", fontsize=9)
plt.xticks(rotation=45)
plt.show()
```

```{python}
# Calculate distribution before downsampling
default_counts_before = loan_data['LoanStatus'].value_counts()

# Balance the classes in the Default column
default_0 = loan_data[loan_data['LoanStatus'] == 0]
default_1 = loan_data[loan_data['LoanStatus'] == 1]

# Downsample majority class
default_0_downsampled = resample(default_0, 
                                 replace=False,    
                                 n_samples=len(default_1),  
                                 random_state=123)

# Combine minority class with downsampled majority class
loan_data_balanced = pd.concat([default_0_downsampled, default_1])

# Calculate distribution after downsampling
default_counts_after = loan_data_balanced['LoanStatus'].value_counts()

# Create a DataFrame for plotting
distribution_df = pd.DataFrame({
    'Before Downsampling': default_counts_before,
    'After Downsampling': default_counts_after
}).reset_index().melt(id_vars='LoanStatus', var_name='Stage', value_name='Count')

loan_data = loan_data_balanced
```

```{python}
# Plot the stacked bar plot
plt.figure(figsize=(8, 8))
sns.barplot(x='Stage', y='Count',hue = 'LoanStatus', data=distribution_df, palette=['#4A90E2', '#003366'])
plt.xlabel('Stage')
plt.ylabel('Count')
plt.figtext(0.5, -0.01, "Figure 4: Distribution of LoanStatus Before and After Downsampling", ha="center", fontsize=11)
plt.legend(title='Default', loc='upper right')
plt.show()
```

Figure 4 demonstrates the the distribution of *LoanStatus* within the dataset. Before downsampling there was a large discrepancy between the number of people who defaulted and who didn't. This can cause large impacts on the ML models deployed in the analysis, leading to skewed perforamnce metrics as the models will predict the majority class with high accuracy but the minority class with lower accuracy. To circumvent this issue, downsampling was performed to ensure both outcomes had the same number of observations, shown in Figure 4

### **2.4 Correlation Analysis**

```{python}
# Split the data into test and train
train_data, test_data = train_test_split(loan_data, test_size=0.2, random_state=123)
# Prepare dataset
X_train = train_data.drop(columns=['LoanStatus'])
y_train = train_data['LoanStatus']
X_test = test_data.drop(columns=['LoanStatus'])
y_test = test_data['LoanStatus']
```

```{python}
from statsmodels.stats.outliers_influence import variance_inflation_factor

plt.rcParams.update({'font.size': 9})
correlation_matrix = loan_data.corr(method='spearman')

# Correlation plot
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt='.2f', linewidths=0.5)
plt.figtext(0.5, -0.2, "Figure 5: Correlation Plot of All Variables ", ha="center", fontsize=12)
plt.show()

LG_vs_LIR = correlation_matrix.loc["LoanIntRate", "LoanGrade"].round(2)
PA_vs_CH = correlation_matrix.loc["CredHistory", "PersonAge"].round(2)

# Add a constant term for intercept
X_train_vif = sm.add_constant(X_train)

# Calculate VIF for each feature
vif_data = pd.DataFrame()
vif_data["Feature"] = X_train_vif.columns
vif_data["VIF"] = [variance_inflation_factor(X_train_vif.values, i) for i in range(X_train_vif.shape[1])]

vif_data["VIF"] = vif_data["VIF"].astype(float).round(3).astype(str)

# Drop the constant term from the VIF DataFrame
vif_data = vif_data[vif_data["Feature"] != "const"]

# Convert the DataFrame to LaTeX format with appropriate formatting
vif_latex = vif_data.to_latex(index=False,
                              caption="Variance Inflation Factor (VIF) Values",
                              label="Table 4:vif_values",
                              column_format="lc",
                              escape=False)
vif_latex = vif_latex.replace("\\begin{table}", "\\begin{table}[H]\\centering")
vif_latex = vif_latex.replace("\\end{table}", "\\end{table}")

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "vif_latex.tex")

# Save to a LaTeX file
with open(file_path, "w") as f:
    f.write(vif_latex)
```

Figure 5 shows a correlation plot quantifying the relationships between the variables and to the target *LoanStatus*. *LoanGrade* and *LoanIntRate* have a high correlation coefficient (`{python} str(LG_vs_LIR)`), indicating that they are highly correlated. Also, a similar relationship is shown between *PersonAge* and *CredHistory* (r = `{python} str(PA_vs_CH)`). Both these relationships make logical sense as someone who is older who have a longer credit history and as loan grade increases it is likley that the interest rate does as well. Due to the mullticolliearity in the data, these variables may have to be removed however, futher analysis with variance inflation factor (VIF) is required.


::: {.content-visible when-format="pdf"}
\input{Tables/vif_latex.tex}
:::

::: {.content-visible when-format="html"}
```{python}
#| tbl-cap: "Table 4 -Variance Inflation Factor (VIF) Values"

HTML(vif_data.to_html(index=False))

```

:::


VIF values for all the variables are shown within Table 4. In contrast to Figure 5, *LoanGrade*, *LoanIntRate*, *PersonAge*, *CredHistory* have low VIF values, indicating low levels of multicollinearity. However, *LoanAmnt* and *LoanPercentIncome* have VIF values greater than 10 which shows multicollinearity and actions need to be taken to ensure they don't affect the models. For the logistic regression, L1 and L2 regularisation was deployed to reduce the affects of multicollinearity. Other models are tree based and handle multicollinearity well, therefore no futher processing is needed.

Within this analysis, LR, RF, XGboost models will be trained to predict ***LoanStatus*** using *PersonAge*, *PersonIncome*, *PersonHomeOwnership*, *PersonEmpLength*, *LoanIntent*, *LoanGrade*, *LoanAmnt*, *LoanIntRate*, *LoanPercentIncome*, *PreviousDefault* and *CredHistory*.



\newpage

### **2.5 Causal Analysis**

This section explores the heterogeneous impact of previous loan default on the likelihood of defaulting again, using a causal forest framework. By estimating Conditional Average Treatment Effects (CATEs), we can uncover how the effect of prior default varies across individual borrower profiles

```{python}
#Have to simulate a causal forest as econml won't install

# Load your dataset
# Assumes LoanStatus is the binary outcome
# and PreviousDefault is the binary treatment (0/1)
X = causal_data.drop(columns=['LoanStatus', 'PreviousDefault'])
y = causal_data['LoanStatus']
t = causal_data['PreviousDefault']

# Split treated and control groups
X_treated = X[t == 1]
y_treated = y[t == 1]

X_control = X[t == 0]
y_control = y[t == 0]

# Train separate models
model_t = RandomForestRegressor(n_estimators=100, random_state=42)
model_t.fit(X_treated, y_treated)

model_c = RandomForestRegressor(n_estimators=100, random_state=42)
model_c.fit(X_control, y_control)

# Predict potential outcomes for all individuals
mu1 = model_t.predict(X)  # potential outcome if treated
mu0 = model_c.predict(X)  # potential outcome if not treated

# Estimate individual treatment effect (ITE)
causal_data['CATE_estimate'] = mu1 - mu0

# Plot the distribution of estimated treatment effects
plt.figure(figsize=(7, 5))
sns.histplot(causal_data['CATE_estimate'], bins=30, kde=True)
plt.figtext(0.5, -0.05, "Figure 6: Estimated Treatment Effects (CATE) for Previous Default", ha="center", fontsize=12)
plt.xlabel('Estimated CATE')
plt.ylabel('Frequency')
plt.show()
```

Figure 6 shows estimated CATEs, revealing a negativley-skewed distribution with most values centered near zero. This suggests that, for the majority of borrowers, previous default status has a limited marginal effect on the likelihood of defaulting again. However, a notable subgroup exhibits significantly positive CATEs, indicating elevated risk. These individuals may represent vulnerable borrower profiles for whom previous financial distress is a strong predictor of future default. The long right tail highlights the importance of heterogeneity in treatment effects and supports the use of a causal forest over average-effect models.

\newpage


## **3. Machine Learning Analysis**

### **3.1 Logistic Regression**

The first model deployed was an LR trained on all the standard variables, this model acts as a baseline to compare all more complex models with.

```{python}
sys.stdout = open(os.devnull, 'w')

# Define the parameter grid for Grid Search
param_grid = {
    'C': [0.01, 0.1, 1, 10, 100],
    'penalty': ['l1', 'l2'],
    'solver': ['liblinear']
}

# Initialize Grid Search with Cross-Validation for Logistic Regression
stratified_kfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)
grid_search = GridSearchCV(LogisticRegression(random_state=42), param_grid, cv=stratified_kfold, scoring='accuracy', verbose=0, n_jobs=-1)

grid_search.fit(X_train, y_train)

# Get the best parameters and best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

# Train the best model
best_lr_model = grid_search.best_estimator_
best_lr_model.fit(X_train, y_train)

sys.stdout = sys.__stdout__

# Make Predictions
lr_predictions = best_lr_model.predict(X_test)
lr_probabilities = best_lr_model.predict_proba(X_test)[:, 1]  # Extract probability for positive class

# Compute Confusion Matrix
conf_matrix_lr = confusion_matrix(y_test, lr_predictions)

# Compute Performance Metrics
accuracyLR = round(accuracy_score(y_test, lr_predictions), 3)
precisionLR = round(precision_score(y_test, lr_predictions), 3)
recallLR = round(recall_score(y_test, lr_predictions), 3)
f1_scoreLR = round(f1_score(y_test, lr_predictions), 3)

# Compute ROC Curve and AUC Score
fpr_lr, tpr_lr, _ = roc_curve(y_test, lr_probabilities)
auc_value_LR = round(auc(fpr_lr, tpr_lr), 3)

```

```{python}
plt.rcParams.update({'font.size': 14})
# Plot ROC Curve for Logistic Regression
plt.figure(figsize=(9, 6))
plt.plot(fpr_lr, tpr_lr, color="blue", linewidth=2, label=f"AUC: {auc_value_LR}")
plt.plot([0, 1], [0, 1], linestyle="--", color="red")  # Reference diagonal
plt.xlabel("False Positive Rate (1 - Specificity)")
plt.ylabel("True Positive Rate (Sensitivity)")
plt.figtext(0.5, -0.1, "Figure 7: ROC Curve for Logistic Regression Model", ha="center", fontsize=9)
plt.legend()
plt.show()
```

Figure 7 shows the ROC curve for the LR model, an indication of the trade-off between sensitivity and specificity of the model. The model achieved a AUC score of `{python} str(auc_value_LR)` which is considered considerable (Çorbacıoğlu, 2023), indicating solid predictive performance when distinguishing between positive outcomes. The model's curve lies well above the diagonal reference line (AUC = 0.5), which represents random classification, demonstrating its predictive applications. However, the graph shows room for improvement due to true positive rate (TPR) remaining below 0.9.

```{python}
plt.rcParams.update({'font.size': 11})

# Convert Confusion Matrix to DataFrame for Visualization
conf_df_lr = pd.DataFrame(conf_matrix_lr, index=["No Default", "Default"],
                          columns=["No Default", "Default"])

# Plot Confusion Matrix for Logistic Regression
plt.figure(figsize=(9, 2.5))
sns.heatmap(conf_df_lr, annot=True, fmt="d", cmap="Blues", linewidths=0.5, cbar=False, annot_kws={"size": 24})
plt.xlabel("Predicted Class")
plt.ylabel("Actual Class")
plt.figtext(0.5, -0.15, "Figure 8: Confusion Matrix for Logistic Regression Model", ha="center", fontsize=9)
plt.show()

TN = conf_df_lr.iloc[0, 0]  # True Negatives (No Default correctly classified)
FP = conf_df_lr.iloc[0, 1]  # False Positives (Non-default misclassified as Default)
FN = conf_df_lr.iloc[1, 0]  # False Negatives (Default misclassified as Non-default)
TP = conf_df_lr.iloc[1, 1]  # True Positives (Default correctly classified)

```

Figure 8 visualises the error within the classification model. The matrix reveals that the model correctly identified `{python} str(TN)` non-default cases (true negatives) and `{python} str(TP)` default cases (true positives), demonstrating its ability to capture both classes effectively. However, `{python} str(FP)` non-default cases were misclassified as defaults (false positives), while `{python} str(FN)` default cases were incorrectly predicted as non-defaults (false negatives), potentially leading to losses in revenue for a financial institution.

```{python}
# Fit logistic regression model using statsmodels for odds ratios
X_train_sm = sm.add_constant(X_train)  # Add constant term for intercept
logit_model = sm.Logit(y_train, X_train_sm).fit()
lr_train = best_lr_model.predict_proba(X_train)[:, 1]  # Extract probability for positive class

# Extract odds ratios and 95% confidence intervals
odds_ratios = np.exp(logit_model.params)
conf = np.exp(logit_model.conf_int())
conf['OR'] = odds_ratios
conf.columns = ['2.5%', '97.5%', 'OR']
conf = conf.reindex((conf['OR'] - 1).abs().sort_values(ascending=True).index)
conf = conf.drop(['const'])

top_features_lr = conf.index[-3:].tolist()  # Logistic Regression (based on Odds Ratios)
Feature_1 = top_features_lr[2]
Feature_2 = top_features_lr[1]
Feature_3 = top_features_lr[0]

odds_Feature_1 = odds_ratios[Feature_1].round(3)
odds_Feature_2 = odds_ratios[Feature_2].round(3)
odds_Feature_3 = odds_ratios[Feature_3].round(3)

# Plot odds ratios as a forest plot with 95% confidence intervals
plt.figure(figsize=(7, 3))
plt.errorbar(conf['OR'], conf.index, xerr=[conf['OR'] - conf['2.5%'], conf['97.5%'] - conf['OR']], fmt='o', color='black', ecolor='gray', capsize=3)
plt.axvline(x=1, linestyle='--', color='red')
plt.xlabel('Odds Ratio')
plt.ylabel('Features')
plt.figtext(0.5, -0.1, "Figure 9: Odds Ratios for Logistic Regression Model", ha = "center", fontsize=10)
plt.show()
```

Figure 9 shows the odds ratios for the LR model. Odds ratios were calculated allowing an easy interpretation of the relationships between the individual features and credit risk. The odds ratio indicate the increase in the risk of defaulting for a one-unit increase in that variable. The results indicate that *`{python} str(Feature_1)`* and *`{python} str(Feature_2)`* have the strongest positive associations with default, with odds ratios of `{python} str(odds_Feature_1)` and `{python} str(odds_Feature_2)` , respectively. This suggests that as interest rates or the proportion of income allocated to the loan increase, the likelihood of default rises significantly. Conversely, *`{python} str(Feature_3)`* has an odds ratio of `{python} str(odds_Feature_3)`, implying that higher income levels reduce the probability of default, aligning with expectations in traditional credit risk assessment.

### **3.2 Random Forest**

The second model that was developed and compared with the LR model was an RF as they have been shown to have superior performance than LR models (Couronné et al., 2018). This model was trained on all the standard variables.

```{python}
# Define the parameter grid for Grid Search
param_grid = {
    'n_estimators': [100],
    'max_depth': [10, 20],
    'min_samples_split': [2, 5,10],
    'min_samples_leaf': [2,4],
    'bootstrap': [False]
}

# Define Stratified K-Fold
stratified_kfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)

# Initialize Grid Search with Cross-Validation
grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=stratified_kfold, scoring='accuracy', verbose=0, n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best parameters and best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

# Train the best model
best_rf_model = grid_search.best_estimator_
best_rf_model.fit(X_train, y_train)

# Make Predictions
rf_predictions = best_rf_model.predict(X_test)
rf_probabilities = best_rf_model.predict_proba(X_test)[:, 1]  # Extract probability for positive class

# Compute Confusion Matrix
conf_matrix_rf = confusion_matrix(y_test, rf_predictions)

# Compute Performance Metrics
accuracyRF = round(accuracy_score(y_test, rf_predictions), 3)
precisionRF = round(precision_score(y_test, rf_predictions), 3)
recallRF = round(recall_score(y_test, rf_predictions), 3)
f1_scoreRF = round(f1_score(y_test, rf_predictions), 3)

# Compute ROC Curve and AUC Score
fpr_rf, tpr_rf, _ = roc_curve(y_test, rf_probabilities)
auc_value_RF = round(auc(fpr_rf, tpr_rf), 3)

```

```{python}
plt.rcParams.update({'font.size': 14})

# Plot ROC Curve for Random Forest
plt.figure(figsize=(9, 6))
plt.plot(fpr_rf, tpr_rf, color="blue", linewidth=2, label=f"AUC: {auc_value_RF}")
plt.plot([0, 1], [0, 1], linestyle="--", color="red")  # Reference diagonal
plt.xlabel("False Positive Rate (1 - Specificity)")
plt.ylabel("True Positive Rate (Sensitivity)")
plt.suptitle("Figure 10: ROC Curve for Random Forest Model", y = -0.05, fontsize=9)
plt.legend()
plt.show()
```

The ROC curve, illustrated in Figure 10 for the RF model showcases its improved classification ability in distinguishing between defaulting and non-defaulting cases and can be compared to LRs. The model achieved a excellent AUC of `{python} str(auc_value_RF)` (Çorbacıoğlu, 2023), indicating strong predictive capability and shows that more complex models have the potential to improve credit risk prediction, however this highly accurate performance may indicate overfitting.

```{python}
plt.rcParams.update({'font.size': 11})

# Convert Confusion Matrix to DataFrame for Visualization
conf_df_rf = pd.DataFrame(conf_matrix_rf, index=["No Default", "Default"],
                          columns=["No Default", "Default"])

# Plot Confusion Matrix for Random Forest
plt.figure(figsize=(9, 3))
sns.heatmap(conf_df_rf, annot=True, fmt="d", cmap="Blues", linewidths=0.5, cbar=False, annot_kws={"size": 24})
plt.xlabel("Predicted Class")
plt.ylabel("Actual Class")
plt.suptitle("Figure 11: Confusion Matrix for Random Forest Model", y = -0.05, fontsize=9)
plt.show()

TN_rf = conf_df_rf.iloc[0, 0]  # True Negatives (No Default correctly classified)
FP_rf = conf_df_rf.iloc[0, 1]  # False Positives (Non-default misclassified as Default)
FN_rf = conf_df_rf.iloc[1, 0]  # False Negatives (Default misclassified as Non-default)
TP_rf = conf_df_rf.iloc[1, 1]  # True Positives (Default correctly classified)
```

The confusion matrix (Figure 11) for the RF model provides a detailed comparison of actual versus predicted default status. In this case, the model correctly predicted non-default for `{python} str(TN_rf)` instances (True Negatives), and correctly identified defaulting for `{python} str(TP_rf)` instances (True Positives). However, there were `{python} str(FP_rf)` false positives, where the model incorrectly predicted defaulting when the actual class was non-default, and `{python} str(FN_rf)` false negatives. This confusion matrix reiterates the improved performance from the LR as the incorret classification instances have decreased.

```{python}
# Importance values
# Extract feature importances
feature_importances = best_rf_model.feature_importances_
features = X_train.columns

# Create a DataFrame for plotting
importance_df_rf = pd.DataFrame({
    'Feature': features,
    'Importance': feature_importances
})

# Sort the DataFrame by importance values
importance_df_rf = importance_df_rf.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(7.5, 3))
sns.barplot(x='Importance', y='Feature', data=importance_df_rf, palette=sns.color_palette("Blues", n_colors=len(importance_df_rf)), edgecolor='black')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.suptitle("Figure 12: Feature Importances from Random Forest Model", y = -0.1, fontsize=10, x = 0.5)
plt.show()
plt.rcParams.update({'font.size': 14})

#Extract most important features
top_features_rf = importance_df_rf.nlargest(3, 'Importance')['Feature'].tolist()  # Random Forest
Feature_1 = top_features_lr[2]
Feature_2 = top_features_lr[1]
Feature_3 = top_features_lr[0]
Feature_4 = importance_df_rf.iloc[3,0]

imp_Feature_1 = importance_df_rf.iloc[0,1].round(3)
imp_Feature_2 = importance_df_rf.iloc[1,1].round(3)
imp_Feature_3 = importance_df_rf.iloc[2,1].round(3)
```

Figure 12 demonstrates the most influential features when predicting credit risk by visualising feature importance calculated using mean decrease in accuracy. *`{python} Feature_1`* is the most important feature suggesting that the proportion of income allocated to a loan has the strongest impact on the model’s predictions, supporting the conclusions from the LR which ranked it second. *`{python} Feature_2`* and *`{python} Feature_3`* are also shown to be within the top 3 most important features as they are in the LR model. Contrastly, to the LR, the RF shows *`{python} Feature_4`* to have high importance whereas Figure 8 shows it to have very little impact on credit risk for the LR model, potentially attributed to the differences in model architecture.

### **3.3 XGBoost**


The third model that I deployed to improve upon the RF model was an XGBoost as they have been shown to reduce potential overfitting and have higher performance and speed than RFs (GeeksforGeeks, 2024).

```{python}
# Define the parameter grid for Grid Search
param_grid = {
    'n_estimators': [200],
    'max_depth': [10, 20],
    'learning_rate': [0.01, 0.1],
    'subsample': [0.8, 1.0],
    'colsample_bytree': [0.8, 1.0],
    'min_child_weight': [1, 5],  # Minimum sum of instance weight (hessian) in a child
    'reg_alpha': [0, 0.1],  # L1 regularization (feature selection)
    'reg_lambda': [0.5, 1]  # L2 regularization (weight shrinkage)
}

grid_search = GridSearchCV(XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='auc'), param_grid, cv=stratified_kfold, scoring='accuracy', verbose=0, n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best parameters and best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

# Train the best model
best_xgb_model = grid_search.best_estimator_
best_xgb_model.fit(X_train, y_train)

# Make Predictions
xgb_predictions = best_xgb_model.predict(X_test)
xgb_probabilities = best_xgb_model.predict_proba(X_test)[:, 1]  # Extract probability for positive class

# Compute Confusion Matrix
conf_matrix_xgb = confusion_matrix(y_test, xgb_predictions)

# Compute Performance Metrics
accuracyXGB = round(accuracy_score(y_test, xgb_predictions), 3)
precisionXGB = round(precision_score(y_test, xgb_predictions), 3)
recallXGB = round(recall_score(y_test, xgb_predictions), 3)
f1_scoreXGB = round(f1_score(y_test, xgb_predictions), 3)

# Compute ROC Curve and AUC Score
fpr_xgb, tpr_xgb, _ = roc_curve(y_test, xgb_probabilities)
auc_value_XGB = round(auc(fpr_xgb, tpr_xgb), 3)
```

```{python}
plt.rcParams.update({'font.size': 14})

# Plot ROC Curve for XGBoost
plt.figure(figsize=(9, 6))
plt.plot(fpr_xgb, tpr_xgb, color="blue", linewidth=2, label=f"AUC: {auc_value_XGB}")
plt.plot([0, 1], [0, 1], linestyle="--", color="red")  # Reference diagonal
plt.xlabel("False Positive Rate (1 - Specificity)")
plt.ylabel("True Positive Rate (Sensitivity)")
plt.suptitle("Figure 13: ROC Curve for XGBoost Model", y = -0.05, fontsize=9)
plt.legend()
plt.show()
```

Figure 13 visualises the performance of the XGBoost in classifying positive outcomes. This model achieves a slightly higher AUC score when compared to the RF (AUC = `{python} str(auc_value_XGB)`), demonstrating excellent predictive performance (Çorbacıoğlu, 2023). Despite the higher AUC score this model is performance is less likely to be attributed to potential overfitting due to built in regularisation parameters; *max_depth* and *min_child_weight* along with L1 + L2 regularisation.

```{python}
plt.rcParams.update({'font.size': 11})

# Convert Confusion Matrix to DataFrame for Visualization
conf_df = pd.DataFrame(conf_matrix_xgb, index=["No Default", "Default"],
                       columns=["No Default", "Default"])

# Plot Confusion Matrix
plt.figure(figsize=(9, 2.5))
sns.heatmap(conf_df, annot=True, fmt="d", cmap="Blues", linewidths=0.5, cbar=False, annot_kws={"size": 24})
plt.xlabel("Predicted Class")
plt.ylabel("Actual Class")
plt.suptitle("Figure 14: Confusion Matrix for XGBoost Model", y = -0.1, fontsize=9)
plt.show()

TN_xgb = conf_df.iloc[0, 0]  # True Negatives (No Default correctly classified)
FP_xgb = conf_df.iloc[0, 1]  # False Positives (Non-default misclassified as Default)
FN_xgb = conf_df.iloc[1, 0]  # False Negatives (Default misclassified as Non-default)
TP_xgb = conf_df.iloc[1, 1]  # True Positives (Default correctly classified)
```

Figure 14 reiterates the increased performance of the XGBoost when compared to the RF model. The XGBoost predicts `{python} str(TP_xgb - TP_rf)` more true positives than the RF model did, indicating better sensitivity which is useful for a lending insitution as this allows them to not give credit to these individuals, avoiding potentially revenue losses. Although the difference is small, defaulting can have large financial losses. The model also has `{python} str(FP_xgb - FP_rf)` fewer false positives, meaning it incorrectly predicts fewer non-defaulters as defaulters. this figure shows that the XGBoost model demonstrates a balanced improvement, capturing more true positives while keeping false positives low, making it a stronger candidate for credit risk assessment.

```{python}
# Extract feature importances
feature_importances = best_xgb_model.feature_importances_
features = X_train.columns

# Create a DataFrame for plotting
importance_df_xgb = pd.DataFrame({
    'Feature': features,
    'Importance': feature_importances
})

# Sort the DataFrame by importance values
importance_df_xgb = importance_df_xgb.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(7.5, 2.5))
sns.barplot(x='Importance', y='Feature', data=importance_df_xgb, palette=sns.color_palette("Blues", n_colors=len(importance_df_xgb)), edgecolor='black')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.suptitle("Figure 15: Feature Importances from XGBoost Model", y = -0.1, fontsize=10, x = 0.5)
plt.show()

top_features_xgb = importance_df_xgb.nlargest(3, 'Importance')['Feature'].tolist()  # Random Forest
Feature_1 = top_features_lr[2]
Feature_2 = top_features_lr[1]
Feature_3 = top_features_lr[0]

imp_Feature_1 = importance_df_xgb.iloc[0,1].round(3)
imp_Feature_2 = importance_df_xgb.iloc[1,1].round(3)
imp_Feature_3 = importance_df_xgb.iloc[2,1].round(3)
```

Figure 15 contradicts the other models (LR and RF), as these models predicted *`{python} Feature_1`* to have less of an impact on the preditions than the XGBoost model. However, similar to the RF and LR model, the XGBoost placed high importance on *`{python} Feature_2`* reinforcing the notion that the proportion of income allocated to a loan significantly impacts the risk of defaulting. However, *`{python} Feature_3`* ranks higher than in the RF and LR, indicating that home ownership status may play a larger role in how XGBoosts evaluates credit risk.

\newpage

### **3.4 Model Evaluation and Comparisons**

```{python}
# Create Accuracy DataFrame
accuracy_df = pd.DataFrame({
    "Model": ["LR","RF", "XGB"],
    "Value": [accuracyLR,accuracyRF, accuracyXGB]
})

# Create Bar Plot for Accuracy
plt.figure(figsize=(9, 3))
sns.barplot(x="Model", y="Value", data=accuracy_df, palette="gray", edgecolor="black")
for index, row in accuracy_df.iterrows():
    plt.text(index, row.Value + 0.02, round(row.Value, 3), ha="center", fontsize=10)
plt.ylim(0, 1)
plt.xlabel("Model")
plt.ylabel("Accuracy")
plt.figtext(0.5, -0.1, "Figure 16: Accuracy for Each Model", ha="center", fontsize=11)
plt.show()

```

```{python}
# Log Loss
log_loss_LR = round(log_loss(y_test, lr_predictions), 3)
log_loss_RF = round(log_loss(y_test, rf_predictions), 3)
log_loss_XGB = round(log_loss(y_test, xgb_predictions), 3)

# Brier Scores
brier_LR = round(brier_score_loss(y_test, lr_predictions),3)
brier_RF = round(brier_score_loss(y_test, rf_predictions),3)
brier_XGB = round(brier_score_loss(y_test, xgb_predictions),3)

# Create a DataFrame for Performance Metrics
performance_df = pd.DataFrame({
    "Model": ["LR","RF", "XGB"],
    "Accuracy": [accuracyLR,accuracyRF, accuracyXGB],
    "Precision": [precisionLR,precisionRF, precisionXGB],
    "Sensitivity": [recallLR,recallRF, recallXGB],
    "F1 Score": [f1_scoreLR,f1_scoreRF, f1_scoreXGB],
    "AUC": [auc_value_LR,auc_value_RF, auc_value_XGB],
    "Log Loss": [log_loss_LR,log_loss_RF, log_loss_XGB],
    "Brier Score": [brier_LR,brier_RF, brier_XGB]
})

# Round values for better readability and format as strings for LaTeX output
performance_df = performance_df.round(3).astype(str)

# Convert the DataFrame to LaTeX format with appropriate formatting
performance_latex = performance_df.to_latex(index=False,
                                             caption="Performance Metrics for Each Model",
                                             label="Table 3 :performance_metrics",
                                             column_format="lrrrrrrr",
                                             escape=False)

# Replace underscores with LaTeX-safe versions
performance_latex = performance_latex.replace("AUC", "AUC")
performance_latex = performance_latex.replace("\\begin{table}", "\\begin{table}[H]\\centering")

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "performance_latex.tex")

# Save to a LaTeX file
with open(file_path, "w") as f:
    f.write(performance_latex)
```

::: {.content-visible when-format="pdf"}
\input{Tables/performance_latex.tex}
:::

::: {.content-visible when-format="html"}
```{python}
#| tbl-cap: "Table 5 -Performance Metrics for Each Model"
HTML(performance_df.to_html(index=False))
```

:::


Figure 16 compares model accuracy, showing that XGBoost (`{python} str(accuracyXGB)`) performs best, followed closely by the RF (`{python} str(accuracyRF)`), while LR lags behind at `{python} str(accuracyLR)`. This highlights the superior performance of ensemble models over LR in classification tasks.

Table 5 provides a more detailed breakdown, confirming XGBoost as the strongest model, with the highest AUC (`{python} str(auc_value_XGB)`), recall (`{python} str(recallXGB)`), and F1 score (`{python} str(f1_scoreXGB)`). RF (AUC = `{python} str(auc_value_RF)`, F1 = `{python} str(f1_scoreRF)`) follow closely, both offering strong predictive performance. LR underperforms across all metrics, with the lowest AUC (`{python} str(auc_value_LR)`) and the highest log loss (`{python} str(log_loss_LR)`), indicating weaker reliability.

The lower log loss and Brier scores for XGBoost reflect better probability calibration, while LR’s higher values suggest less confidence in predictions. Overall, XGBoost provide the best balance of accuracy, precision, and reliability, making them the most effective model in credit risk analysis.

```{python}
# Extract top 3 features for each model
top_features_lr = conf.index[-3:].tolist()  # Logistic Regression (based on Odds Ratios)
top_features_rf = importance_df_rf.nlargest(3, 'Importance')['Feature'].tolist()  # Random Forest
top_features_xgb = importance_df_xgb.nlargest(3, 'Importance')['Feature'].tolist()  # XGBoost

# Create a DataFrame for top features
top_features_df = pd.DataFrame({
    "Logistic Regression": top_features_lr,
    "Random Forest": top_features_rf,
    "XGBoost": top_features_xgb
    }, index=["Feature 1", "Feature 2", "Feature 3"])  # Rename row labels

# Convert the DataFrame to LaTeX format
top_features_latex = top_features_df.to_latex(
                                              caption="Top 3 Most Important Variables for Each Model",
                                              label="Table:top_features",
                                              column_format="lcccc",
                                              escape=False)

top_features_latex = top_features_latex.replace("\\begin{table}", "\\begin{table}[H]\\centering")

# Ensure the directory exists
os.makedirs("Tables", exist_ok=True)

# Define the full file path
file_path = os.path.join("Tables", "top_features_table.tex")

# Save to a LaTeX file
with open(file_path, "w") as f:
    f.write(top_features_latex)
```


::: {.content-visible when-format="pdf"}
\input{Tables/top_features_table.tex}
:::

::: {.content-visible when-format="html"}
```{python}
#| tbl-cap: "Table 6 - Top 3 Most Important Features for Each Model"
HTML(top_features_df.to_html(index=False))
```

:::

Table 6 summarises the key predictors of default for each model. LR relies on *PersonIncome*, *LoanPercentIncome*, and *LoanIntRate*, suggesting a linear relationship between income, loan percentage, and default risk. RF prioritises *LoanPercentIncome* and *PersonIncome*, indicating the importance of relative loan burden, while also recognising *LoanIntRate*. XGBoost identifies *LoanGrade* as the most influential feature, followed by *PersonHomeOwnership* and *LoanPercentIncome*, reflecting a broader assessment of creditworthiness. The differences suggest that tree-based models (RF, XGBoost) capture non-linear relationships better than LR, which is constrained to linear associations.

### **3.5 Practical Implications and Limiations**

The findings demonstrate the effectiveness of ensemble learning models, particularly XGBoost and RF, in improving credit risk assessment. These models outperform traditional approaches by capturing complex patterns in financial data and handling imbalanced datasets more effectively (Chopra & Bhilare, 2018). By focusing on key predictors such as *LoanGrade*, *LoanPercentIncome*, and *PersonIncome*, lenders can refine their risk assessment frameworks, improving accuracy while minimising misclassification errors. This enables better-informed lending decisions, reducing default rates and enhancing overall portfolio performance. 

Despite their advantages, ensemble models present several challenges. Their complexity reduces interpretability, which is a key consideration in regulated industries where transparency is required (Afolabi, 2024). Ensemble models also require higher computational resources, increasing costs and making them less accessible to smaller institutions (Lei, 2025). Furthermore, ensemble methods are prone to overfitting when applied to imbalanced datasets, limiting their generalisability without proper tuning (Cheng et al., 2021). Another concern is the potential amplification of biases present in training data, which could lead to ethical issues in credit decision-making (Shah & Davis, 2025). Addressing these limitations requires further research into explainable AI, optimised model tuning, and bias mitigation strategies to ensure fair and reliable predictions.


\newpage

## **4. Conclusion**
This project compared the effectiveness of LR, RF, and XGB in predicting loan defaults, with results showing that ensemble models significantly outperform traditional approaches. XGB achieved the highest accuracy (`{python} str(accuracyXGB)`) and AUC (`{python} str(auc_value_XGB)`), demonstrating its ability to capture complex patterns in financial data. RF also performed well, but its slightly lower recall suggests it may miss some defaulters, leading to financial losses. In contrast, LR lagged behind due to its reliance on linear relationships, making it less suited for this type of predictive task.

Feature importance analysis revealed key differences in how these models assess risk. LR prioritised income-based factors, whereas RF and XGB incorporated broader indicators such as *LoanGrade* and *PersonHomeOwnership*. This suggests that ensemble methods offer a more nuanced and holistic approach to credit risk assessment, moving beyond simple financial metrics.

Despite their strengths, XGB and RF come with limitations. Their complexity makes them harder to interpret, which could be a barrier in regulated financial environments. They also require careful tuning to avoid overfitting, meaning their performance depends heavily on parameter selection. Future work should focus on improving explainability, reducing bias in training data, and optimising hyperparameters to further refine predictive performance.

[Link to Github Repository = BEE2041 Data Science In Economics Empirical Project](https://github.com/JoshLG18/DSE-EMP-Project)